// Service d'int√©gration financi√®re pour synchroniser automatiquement
// les salaires et √©colages avec les transactions financi√®res

import { transactionsService, salariesService, feesService } from '../firebase/firebaseService';
import type { Transaction, SalaryRecord, Fee } from '../firebase/collections';

export interface FinancialIntegrationResult {
  success: boolean;
  transactionId?: string;
  error?: string;
}

export class FinancialIntegrationService {
  /**
   * Cr√©er automatiquement un d√©caissement lors du paiement d'un salaire
   */
  static async createSalaryTransaction(salaryRecord: SalaryRecord): Promise<FinancialIntegrationResult> {
    try {
      console.log('üîÑ Cr√©ation automatique de transaction pour salaire:', salaryRecord.employeeName);
      
      // V√©rifier si une transaction existe d√©j√† pour cet employ√©/p√©riode
      const existingTransactions = await transactionsService.getAll();
      const duplicateTransaction = existingTransactions.find(t => 
        t.relatedModule === 'salary' && 
        t.relatedId === salaryRecord.id &&
        t.type === 'D√©caissement' &&
        t.category === 'Salaires'
      );
      
      if (duplicateTransaction) {
        console.log('‚ö†Ô∏è Transaction existante trouv√©e, mise √† jour au lieu de cr√©ation:', duplicateTransaction.id);
        
        // Mettre √† jour la transaction existante
        const updateData = {
          description: `Salaire ${salaryRecord.employeeName} - ${new Date().toLocaleDateString('fr-FR', { month: 'long', year: 'numeric' })}`,
          amount: salaryRecord.netSalary,
          date: new Date().toISOString().split('T')[0],
          notes: `Mis √† jour automatiquement - Salaire net: ${salaryRecord.netSalary.toLocaleString()} Ar`
        };
        
        await transactionsService.update(duplicateTransaction.id, updateData);
        
        console.log('‚úÖ Transaction de salaire mise √† jour:', duplicateTransaction.id);
        
        return {
          success: true,
          transactionId: duplicateTransaction.id
        };
      }
      
      const currentDate = new Date();
      const monthYear = currentDate.toLocaleDateString('fr-FR', { 
        month: 'long', 
        year: 'numeric' 
      });
      
      const transactionData: Omit<Transaction, 'id'> = {
        type: 'D√©caissement',
        category: 'Salaires',
        description: `Salaire ${salaryRecord.employeeName} - ${monthYear}`,
        amount: salaryRecord.netSalary,
        date: new Date().toISOString().split('T')[0],
        paymentMethod: 'Virement',
        status: 'Valid√©',
        reference: `SAL-${currentDate.getFullYear()}-${salaryRecord.employeeId?.substring(0, 4).toUpperCase()}`,
        relatedModule: 'salary',
        relatedId: salaryRecord.id,
        notes: `Paiement automatique - Salaire net: ${salaryRecord.netSalary.toLocaleString()} Ar`
      };

      const transactionId = await transactionsService.create(transactionData);
      
      console.log('‚úÖ Transaction de salaire cr√©√©e automatiquement:', transactionId);
      
      return {
        success: true,
        transactionId
      };
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la cr√©ation de transaction de salaire:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Cr√©er automatiquement un encaissement lors du paiement d'√©colage
   */
  static async createEcolageTransaction(payment: Fee): Promise<FinancialIntegrationResult> {
    try {
      console.log('üîÑ Cr√©ation automatique de transaction pour √©colage:', payment.studentName);
      
      // V√©rifier si une transaction existe d√©j√† pour ce paiement
      const existingTransactions = await transactionsService.getAll();
      const duplicateTransaction = existingTransactions.find(t => 
        t.relatedModule === 'ecolage' && 
        t.relatedId === payment.id &&
        t.type === 'Encaissement' &&
        t.category === '√âcolages'
      );
      
      if (duplicateTransaction) {
        console.log('‚ö†Ô∏è Transaction existante trouv√©e, mise √† jour au lieu de cr√©ation:', duplicateTransaction.id);
        
        // Mettre √† jour la transaction existante
        const updateData = {
          description: `√âcolage ${payment.studentName} - ${payment.period}`,
          amount: payment.amount,
          date: payment.paymentDate,
          paymentMethod: this.mapPaymentMethod(payment.paymentMethod),
          notes: `Mis √† jour automatiquement - Classe: ${payment.class}`
        };
        
        await transactionsService.update(duplicateTransaction.id, updateData);
        
        console.log('‚úÖ Transaction d\'√©colage mise √† jour:', duplicateTransaction.id);
        
        return {
          success: true,
          transactionId: duplicateTransaction.id
        };
      }
      
      const transactionData: Omit<Transaction, 'id'> = {
        type: 'Encaissement',
        category: '√âcolages',
        description: `√âcolage ${payment.studentName} - ${payment.period}`,
        amount: payment.amount,
        date: payment.paymentDate,
        paymentMethod: this.mapPaymentMethod(payment.paymentMethod),
        status: 'Valid√©',
        reference: payment.reference,
        relatedModule: 'ecolage',
        relatedId: payment.id,
        notes: `Paiement automatique - Classe: ${payment.class}`
      };

      const transactionId = await transactionsService.create(transactionData);
      
      console.log('‚úÖ Transaction d\'√©colage cr√©√©e automatiquement:', transactionId);
      
      return {
        success: true,
        transactionId
      };
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la cr√©ation de transaction d\'√©colage:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Synchroniser une transaction existante avec les modules li√©s
   */
  static async syncTransactionWithModules(transaction: Transaction): Promise<void> {
    try {
      console.log('üîÑ Synchronisation de transaction:', transaction.id);
      
      if (transaction.relatedModule === 'salary' && transaction.relatedId) {
        // Mettre √† jour le statut du salaire si n√©cessaire
        const salaryRecord = await salariesService.getById(transaction.relatedId);
        if (salaryRecord && salaryRecord.status !== 'paid') {
          await salariesService.update(transaction.relatedId, {
            status: transaction.status === 'Valid√©' ? 'paid' : 'pending'
          });
          console.log('‚úÖ Statut du salaire synchronis√©');
        }
      }
      
      if (transaction.relatedModule === 'ecolage' && transaction.relatedId) {
        // Mettre √† jour le statut de l'√©colage si n√©cessaire
        const payment = await feesService.getById(transaction.relatedId);
        if (payment && payment.status !== 'paid') {
          await feesService.update(transaction.relatedId, {
            status: transaction.status === 'Valid√©' ? 'paid' : 'pending'
          });
          console.log('‚úÖ Statut de l\'√©colage synchronis√©');
        }
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la synchronisation:', error);
    }
  }

  /**
   * Supprimer automatiquement les transactions li√©es lors de la suppression
   */
  static async deleteRelatedTransactions(module: 'salary' | 'ecolage', recordId: string): Promise<void> {
    try {
      console.log(`üóëÔ∏è Suppression des transactions li√©es au module ${module}, ID: ${recordId}`);
      
      // R√©cup√©rer toutes les transactions
      const allTransactions = await transactionsService.getAll();
      
      // Filtrer les transactions li√©es
      const relatedTransactions = allTransactions.filter(
        t => t.relatedModule === module && t.relatedId === recordId
      );
      
      // Supprimer chaque transaction li√©e
      for (const transaction of relatedTransactions) {
        if (transaction.id) {
          await transactionsService.delete(transaction.id);
          console.log(`‚úÖ Transaction supprim√©e: ${transaction.id}`);
        }
      }
      
      console.log(`‚úÖ ${relatedTransactions.length} transaction(s) li√©e(s) supprim√©e(s)`);
    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression des transactions li√©es:', error);
    }
  }

  /**
   * Obtenir toutes les transactions li√©es √† un enregistrement
   */
  static async getRelatedTransactions(module: 'salary' | 'ecolage', recordId: string): Promise<Transaction[]> {
    try {
      const allTransactions = await transactionsService.getAll();
      return allTransactions.filter(
        t => t.relatedModule === module && t.relatedId === recordId
      );
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des transactions li√©es:', error);
      return [];
    }
  }

  /**
   * Calculer le r√©sum√© financier global
   */
  static async calculateFinancialSummary(): Promise<{
    totalEcolages: number;
    totalSalaires: number;
    soldeNet: number;
    transactionsCount: number;
  }> {
    try {
      const allTransactions = await transactionsService.getAll();
      
      // Si aucune transaction, retourner des valeurs par d√©faut
      if (allTransactions.length === 0) {
        return {
          totalEcolages: 0,
          totalSalaires: 0,
          soldeNet: 0,
          transactionsCount: 0
        };
      }
      
      const validTransactions = allTransactions.filter(t => t.status === 'Valid√©');
      
      const totalEcolages = validTransactions
        .filter(t => t.type === 'Encaissement' && t.category === '√âcolages')
        .reduce((acc, t) => acc + t.amount, 0);
      
      const totalSalaires = validTransactions
        .filter(t => t.type === 'D√©caissement' && t.category === 'Salaires')
        .reduce((acc, t) => acc + t.amount, 0);
      
      const totalEncaissements = validTransactions
        .filter(t => t.type === 'Encaissement')
        .reduce((acc, t) => acc + t.amount, 0);
      
      const totalDecaissements = validTransactions
        .filter(t => t.type === 'D√©caissement')
        .reduce((acc, t) => acc + t.amount, 0);
      
      return {
        totalEcolages,
        totalSalaires,
        soldeNet: totalEncaissements - totalDecaissements,
        transactionsCount: allTransactions.length
      };
    } catch (error) {
      console.error('‚ùå Erreur lors du calcul du r√©sum√© financier:', error);
      return {
        totalEcolages: 0,
        totalSalaires: 0,
        soldeNet: 0,
        transactionsCount: 0
      };
    }
  }

  /**
   * Mapper les m√©thodes de paiement entre les modules
   */
  private static mapPaymentMethod(method: string): string {
    const mapping: { [key: string]: string } = {
      'cash': 'Esp√®ces',
      'bank_transfer': 'Virement',
      'mobile_money': 'Mobile Money',
      'check': 'Ch√®que',
      'card': 'Carte bancaire'
    };
    
    return mapping[method] || method;
  }

  /**
   * Valider la coh√©rence des donn√©es financi√®res
   */
  static async validateFinancialConsistency(): Promise<{
    isConsistent: boolean;
    issues: string[];
  }> {
    try {
      const issues: string[] = [];
      
      // V√©rifier les √©colages sans transactions
      const allPayments = await feesService.getAll();
      const allTransactions = await transactionsService.getAll();
      
      // Si aucune donn√©e, consid√©rer comme coh√©rent
      if (allPayments.length === 0 && allTransactions.length === 0) {
        return {
          isConsistent: true,
          issues: []
        };
      }
      
      const paymentsWithoutTransactions = allPayments.filter(payment => {
        return !allTransactions.some(t => 
          t.relatedModule === 'ecolage' && t.relatedId === payment.id
        );
      });
      
      if (paymentsWithoutTransactions.length > 0) {
        issues.push(`${paymentsWithoutTransactions.length} paiement(s) d'√©colage sans transaction associ√©e`);
      }
      
      // V√©rifier les salaires sans transactions
      const allSalaries = await salariesService.getAll();
      const salariesWithoutTransactions = allSalaries.filter(salary => {
        return !allTransactions.some(t => 
          t.relatedModule === 'salary' && t.relatedId === salary.id
        );
      });
      
      if (salariesWithoutTransactions.length > 0) {
        issues.push(`${salariesWithoutTransactions.length} salaire(s) sans transaction associ√©e`);
      }
      
      return {
        isConsistent: issues.length === 0,
        issues
      };
    } catch (error) {
      console.error('‚ùå Erreur lors de la validation de coh√©rence:', error);
      return {
        isConsistent: false,
        issues: ['Erreur lors de la validation']
      };
    }
  }

  /**
   * R√©parer automatiquement les incoh√©rences d√©tect√©es
   */
  static async repairFinancialInconsistencies(): Promise<{
    repaired: number;
    errors: string[];
  }> {
    try {
      let repaired = 0;
      const errors: string[] = [];
      
      // Cr√©er les transactions manquantes pour les √©colages
      const allPayments = await feesService.getAll();
      const allTransactions = await transactionsService.getAll();
      
      for (const payment of allPayments) {
        const hasTransaction = allTransactions.some(t => 
          t.relatedModule === 'ecolage' && t.relatedId === payment.id
        );
        
        if (!hasTransaction && payment.status === 'paid') {
          try {
            await this.createEcolageTransaction(payment);
            repaired++;
          } catch (error: any) {
            errors.push(`√âcolage ${payment.studentName}: ${error.message}`);
          }
        }
      }
      
      // Cr√©er les transactions manquantes pour les salaires
      const allSalaries = await salariesService.getAll();
      
      for (const salary of allSalaries) {
        const hasTransaction = allTransactions.some(t => 
          t.relatedModule === 'salary' && t.relatedId === salary.id
        );
        
        if (!hasTransaction && salary.status === 'active') {
          try {
            await this.createSalaryTransaction(salary);
            repaired++;
          } catch (error: any) {
            errors.push(`Salaire ${salary.employeeName}: ${error.message}`);
          }
        }
      }
      
      console.log(`‚úÖ R√©paration termin√©e: ${repaired} transaction(s) cr√©√©e(s)`);
      
      return { repaired, errors };
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la r√©paration:', error);
      return {
        repaired: 0,
        errors: [error.message]
      };
    }
  }

  /**
   * V√©rifier et nettoyer les transactions en double pour un employ√©
   */
  static async cleanupDuplicateSalaryTransactions(employeeId: string, employeeName: string): Promise<{
    cleaned: number;
    errors: string[];
  }> {
    try {
      console.log(`üßπ Nettoyage des transactions en double pour ${employeeName}`);
      
      const allTransactions = await transactionsService.getAll();
      
      // Grouper les transactions de salaire par employ√© et p√©riode
      const salaryTransactions = allTransactions.filter(t => 
        t.relatedModule === 'salary' && 
        t.type === 'D√©caissement' && 
        t.category === 'Salaires' &&
        t.description.includes(employeeName)
      );
      
      if (salaryTransactions.length <= 1) {
        console.log(`‚ÑπÔ∏è Aucun doublon trouv√© pour ${employeeName}`);
        return { cleaned: 0, errors: [] };
      }
      
      // Garder la transaction la plus r√©cente et supprimer les autres
      const sortedTransactions = salaryTransactions.sort((a, b) => 
        new Date(b.createdAt || b.date).getTime() - new Date(a.createdAt || a.date).getTime()
      );
      
      const transactionToKeep = sortedTransactions[0];
      const transactionsToDelete = sortedTransactions.slice(1);
      
      let cleaned = 0;
      const errors: string[] = [];
      
      for (const transaction of transactionsToDelete) {
        try {
          if (transaction.id) {
            await transactionsService.delete(transaction.id);
            cleaned++;
            console.log(`üóëÔ∏è Transaction en double supprim√©e: ${transaction.id}`);
          }
        } catch (error: any) {
          errors.push(`Erreur suppression ${transaction.id}: ${error.message}`);
        }
      }
      
      console.log(`‚úÖ Nettoyage termin√© pour ${employeeName}: ${cleaned} doublon(s) supprim√©(s)`);
      
      return { cleaned, errors };
    } catch (error: any) {
      console.error('‚ùå Erreur lors du nettoyage des doublons:', error);
      return { cleaned: 0, errors: [error.message] };
    }
  }

  /**
   * Nettoyer tous les doublons de transactions de salaires
   */
  static async cleanupAllDuplicateSalaryTransactions(): Promise<{
    totalCleaned: number;
    employeesProcessed: number;
    errors: string[];
  }> {
    try {
      console.log('üßπ D√©but du nettoyage global des doublons de transactions de salaires');
      
      const allTransactions = await transactionsService.getAll();
      const salaryTransactions = allTransactions.filter(t => 
        t.relatedModule === 'salary' && 
        t.type === 'D√©caissement' && 
        t.category === 'Salaires'
      );
      
      // Grouper par nom d'employ√©
      const transactionsByEmployee = salaryTransactions.reduce((acc, transaction) => {
        const employeeName = transaction.description.split(' - ')[0].replace('Salaire ', '');
        if (!acc[employeeName]) {
          acc[employeeName] = [];
        }
        acc[employeeName].push(transaction);
        return acc;
      }, {} as { [employeeName: string]: any[] });
      
      let totalCleaned = 0;
      let employeesProcessed = 0;
      const errors: string[] = [];
      
      for (const [employeeName, transactions] of Object.entries(transactionsByEmployee)) {
        if (transactions.length > 1) {
          try {
            const result = await this.cleanupDuplicateSalaryTransactions('', employeeName);
            totalCleaned += result.cleaned;
            errors.push(...result.errors);
            employeesProcessed++;
          } catch (error: any) {
            errors.push(`${employeeName}: ${error.message}`);
          }
        }
      }
      
      console.log(`‚úÖ Nettoyage global termin√©: ${totalCleaned} doublon(s) supprim√©(s) pour ${employeesProcessed} employ√©(s)`);
      
      return { totalCleaned, employeesProcessed, errors };
    } catch (error: any) {
      console.error('‚ùå Erreur lors du nettoyage global:', error);
      return { totalCleaned: 0, employeesProcessed: 0, errors: [error.message] };
    }
  }
}